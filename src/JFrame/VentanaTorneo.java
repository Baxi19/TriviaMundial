/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrame;
//Libreria de animaciones

import Class.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import static java.util.Collections.list;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import java.util.List;
import java.util.TimerTask;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.ListSelectionModel;
import sun.swing.ImageIconUIResource;

/**
 *
 * @author Randald Villegas
 */
public class VentanaTorneo extends javax.swing.JFrame {
    DefaultListModel<String> listModel = new DefaultListModel<>();
    DefaultListModel<String> listModel2 = new DefaultListModel<>();
    private String nombreTorneo;
    private int contador = 30;
    private int contadorTimpoTotal = 0;
    private boolean juegoIniciado = false;
    private boolean preguntaRevisada = false;
    private int contadorJugadores = 1;
    private int auxContadorJugadores = 0;
    private String tipoRespuesta;
    ArrayList<String> listaRespuestas = new ArrayList<>();
    private int consecutivas=0;
    VentanaInicio F1;

    /**
     * Creates new form Login
     */
    public VentanaTorneo(String nombreTorneoRecibido, VentanaInicio F1) {
        initComponents();
        imprimirCategorias();
        this.F1=F1;
        
        
        nombreTorneo = nombreTorneoRecibido;
        
        //hace aparecer en el centro de la pantalla
        this.setLocationRelativeTo(null);
        //Damos el saludo al usuario logueado
        showTimerTournament();
        usuarioActual.setText(null);
        usuarioActual.setText(Metodos.getInstance().getListaJugadoresTorneo().get(0).getNombreUsuario());
        Jugador u = Metodos.getInstance().buscarJugador(usuarioActual.getText());
        imprimirDatos(u);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        jButtonWildCard = new javax.swing.JButton();
        jLabelTorneo1 = new javax.swing.JLabel();
        jLabelTerminarTurno = new javax.swing.JLabel();
        jButtonTerminarTurno = new javax.swing.JButton();
        tipoPregunta = new javax.swing.JLabel();
        jLabelStrat3 = new javax.swing.JLabel();
        jLabelStrat6 = new javax.swing.JLabel();
        JlabelPuntos = new javax.swing.JLabel();
        JlabelBorderComodin = new javax.swing.JLabel();
        usuarioMonedas = new javax.swing.JLabel();
        jButtonStartTournament1 = new javax.swing.JButton();
        jLabelStrat4 = new javax.swing.JLabel();
        jLabelStrat5 = new javax.swing.JLabel();
        jButtonStartTournament3 = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListCategorias = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListPreguntas = new javax.swing.JList<>();
        jButtonRevisarRespuestas = new javax.swing.JButton();
        torneoNombre = new javax.swing.JLabel();
        jLabelFotoUsuario = new javax.swing.JLabel();
        jLabelTimeAux = new javax.swing.JLabel();
        jLabelNivel = new javax.swing.JLabel();
        fechaAdmi = new javax.swing.JLabel();
        horaAdmi = new javax.swing.JLabel();
        usuarioActual = new javax.swing.JLabel();
        jButtonImprimirCategorias = new javax.swing.JButton();
        jLabelStrat = new javax.swing.JLabel();
        jLabelTorneo = new javax.swing.JLabel();
        jButtonOff = new javax.swing.JButton();
        jButtonHome = new javax.swing.JButton();
        jLabelPaloVertical = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        botonMinimizar = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabelBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        background.setMaximumSize(new java.awt.Dimension(1000, 500));
        background.setMinimumSize(new java.awt.Dimension(1000, 500));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonWildCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/comod.png"))); // NOI18N
        jButtonWildCard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButtonWildCard.setBorderPainted(false);
        jButtonWildCard.setContentAreaFilled(false);
        jButtonWildCard.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonWildCard.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jButtonWildCardMouseMoved(evt);
            }
        });
        jButtonWildCard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonWildCardMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonWildCardMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonWildCardMouseExited(evt);
            }
        });
        background.add(jButtonWildCard, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 440, 50, 50));

        jLabelTorneo1.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        jLabelTorneo1.setForeground(new java.awt.Color(111, 174, 2));
        jLabelTorneo1.setText("Correct Answer");
        background.add(jLabelTorneo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 340, 130, -1));

        jLabelTerminarTurno.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        jLabelTerminarTurno.setForeground(new java.awt.Color(111, 174, 2));
        jLabelTerminarTurno.setText("Next Turn");
        background.add(jLabelTerminarTurno, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 460, 90, -1));

        jButtonTerminarTurno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar1.png"))); // NOI18N
        jButtonTerminarTurno.setBorder(null);
        jButtonTerminarTurno.setBorderPainted(false);
        jButtonTerminarTurno.setContentAreaFilled(false);
        jButtonTerminarTurno.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonTerminarTurno.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar2.png"))); // NOI18N
        jButtonTerminarTurno.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar2.png"))); // NOI18N
        jButtonTerminarTurno.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar2.png"))); // NOI18N
        jButtonTerminarTurno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonTerminarTurnoMouseClicked(evt);
            }
        });
        jButtonTerminarTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTerminarTurnoActionPerformed(evt);
            }
        });
        background.add(jButtonTerminarTurno, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 450, -1, -1));

        tipoPregunta.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        tipoPregunta.setForeground(new java.awt.Color(111, 174, 2));
        background.add(tipoPregunta, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 120, 200, 50));

        jLabelStrat3.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        jLabelStrat3.setForeground(new java.awt.Color(111, 174, 2));
        jLabelStrat3.setText("Coins");
        background.add(jLabelStrat3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 450, 40, 40));

        jLabelStrat6.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        jLabelStrat6.setForeground(new java.awt.Color(111, 174, 2));
        jLabelStrat6.setText("Skip: -3 Coins");
        background.add(jLabelStrat6, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 450, 110, 40));

        JlabelPuntos.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        JlabelPuntos.setForeground(new java.awt.Color(111, 174, 2));
        background.add(JlabelPuntos, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 450, 40, 40));

        JlabelBorderComodin.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        JlabelBorderComodin.setForeground(new java.awt.Color(111, 174, 2));
        background.add(JlabelBorderComodin, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 450, 40, 40));

        usuarioMonedas.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        usuarioMonedas.setForeground(new java.awt.Color(111, 174, 2));
        background.add(usuarioMonedas, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 450, 40, 40));

        jButtonStartTournament1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/7.png"))); // NOI18N
        jButtonStartTournament1.setBorder(null);
        jButtonStartTournament1.setBorderPainted(false);
        jButtonStartTournament1.setContentAreaFilled(false);
        jButtonStartTournament1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonStartTournament1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonStartTournament1MouseClicked(evt);
            }
        });
        background.add(jButtonStartTournament1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 440, 50, 50));

        jLabelStrat4.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        jLabelStrat4.setForeground(new java.awt.Color(111, 174, 2));
        jLabelStrat4.setText("Wildcard");
        jLabelStrat4.setAlignmentX(2.0F);
        background.add(jLabelStrat4, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 450, 90, 40));

        jLabelStrat5.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        jLabelStrat5.setForeground(new java.awt.Color(111, 174, 2));
        jLabelStrat5.setText("Points");
        background.add(jLabelStrat5, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 450, -1, 40));

        jButtonStartTournament3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/status.png"))); // NOI18N
        jButtonStartTournament3.setBorder(null);
        jButtonStartTournament3.setBorderPainted(false);
        jButtonStartTournament3.setContentAreaFilled(false);
        jButtonStartTournament3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonStartTournament3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonStartTournament3MouseClicked(evt);
            }
        });
        background.add(jButtonStartTournament3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 440, 50, 50));

        jButtonNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/420.png"))); // NOI18N
        jButtonNext.setBorder(null);
        jButtonNext.setBorderPainted(false);
        jButtonNext.setContentAreaFilled(false);
        jButtonNext.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonNext.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/421.png"))); // NOI18N
        jButtonNext.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/421.png"))); // NOI18N
        jButtonNext.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/421.png"))); // NOI18N
        jButtonNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNextMouseClicked(evt);
            }
        });
        background.add(jButtonNext, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 450, 50, 40));

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(111, 174, 2)));
        jScrollPane1.setOpaque(false);

        jListCategorias.setBackground(new java.awt.Color(0, 0, 0));
        jListCategorias.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jListCategorias.setForeground(new java.awt.Color(111, 174, 2));
        jListCategorias.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jListCategorias);

        background.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, 180, 130));

        jScrollPane2.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(111, 174, 2)));
        jScrollPane2.setOpaque(false);

        jListPreguntas.setBackground(new java.awt.Color(0, 0, 0));
        jListPreguntas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jListPreguntas.setForeground(new java.awt.Color(111, 174, 2));
        jListPreguntas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(jListPreguntas);

        background.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 180, 480, 130));

        jButtonRevisarRespuestas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar1.png"))); // NOI18N
        jButtonRevisarRespuestas.setBorder(null);
        jButtonRevisarRespuestas.setBorderPainted(false);
        jButtonRevisarRespuestas.setContentAreaFilled(false);
        jButtonRevisarRespuestas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRevisarRespuestas.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar2.png"))); // NOI18N
        jButtonRevisarRespuestas.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar2.png"))); // NOI18N
        jButtonRevisarRespuestas.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar2.png"))); // NOI18N
        jButtonRevisarRespuestas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonRevisarRespuestasMouseClicked(evt);
            }
        });
        jButtonRevisarRespuestas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRevisarRespuestasActionPerformed(evt);
            }
        });
        background.add(jButtonRevisarRespuestas, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 330, -1, -1));

        torneoNombre.setFont(new java.awt.Font("Script MT Bold", 0, 20)); // NOI18N
        torneoNombre.setForeground(new java.awt.Color(111, 174, 2));
        background.add(torneoNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, 180, 30));
        background.add(jLabelFotoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 150, 140));

        jLabelTimeAux.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        jLabelTimeAux.setForeground(new java.awt.Color(111, 174, 2));
        jLabelTimeAux.setText("Time :");
        background.add(jLabelTimeAux, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 110, 100, 60));

        jLabelNivel.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        jLabelNivel.setForeground(new java.awt.Color(111, 174, 2));
        jLabelNivel.setText("30");
        background.add(jLabelNivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 110, 60, 60));

        fechaAdmi.setFont(new java.awt.Font("Script MT Bold", 1, 18)); // NOI18N
        fechaAdmi.setForeground(new java.awt.Color(255, 255, 255));
        fechaAdmi.setText("Total Time:");
        fechaAdmi.setToolTipText("");
        background.add(fechaAdmi, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 0, 110, 50));

        horaAdmi.setFont(new java.awt.Font("Script MT Bold", 1, 18)); // NOI18N
        horaAdmi.setForeground(new java.awt.Color(255, 255, 255));
        horaAdmi.setToolTipText("");
        background.add(horaAdmi, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 10, 50, 30));

        usuarioActual.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        usuarioActual.setForeground(new java.awt.Color(111, 174, 2));
        background.add(usuarioActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 130, 30));

        jButtonImprimirCategorias.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar1.png"))); // NOI18N
        jButtonImprimirCategorias.setBorder(null);
        jButtonImprimirCategorias.setBorderPainted(false);
        jButtonImprimirCategorias.setContentAreaFilled(false);
        jButtonImprimirCategorias.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonImprimirCategorias.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar2.png"))); // NOI18N
        jButtonImprimirCategorias.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar2.png"))); // NOI18N
        jButtonImprimirCategorias.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/aceptar2.png"))); // NOI18N
        jButtonImprimirCategorias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonImprimirCategoriasMouseClicked(evt);
            }
        });
        background.add(jButtonImprimirCategorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 330, 60, -1));

        jLabelStrat.setFont(new java.awt.Font("Script MT Bold", 0, 20)); // NOI18N
        jLabelStrat.setForeground(new java.awt.Color(111, 174, 2));
        jLabelStrat.setText("Tournament's name:");
        background.add(jLabelStrat, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, -1, -1));

        jLabelTorneo.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        jLabelTorneo.setForeground(new java.awt.Color(111, 174, 2));
        jLabelTorneo.setText("Select a Category");
        background.add(jLabelTorneo, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 340, 130, -1));

        jButtonOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/off1.png"))); // NOI18N
        jButtonOff.setBorder(null);
        jButtonOff.setBorderPainted(false);
        jButtonOff.setContentAreaFilled(false);
        jButtonOff.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonOff.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/off2.png"))); // NOI18N
        jButtonOff.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/off2.png"))); // NOI18N
        jButtonOff.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/off2.png"))); // NOI18N
        jButtonOff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOffMouseClicked(evt);
            }
        });
        background.add(jButtonOff, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 20, -1, -1));

        jButtonHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/log1.png"))); // NOI18N
        jButtonHome.setBorder(null);
        jButtonHome.setBorderPainted(false);
        jButtonHome.setContentAreaFilled(false);
        jButtonHome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonHome.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/log2.png"))); // NOI18N
        jButtonHome.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/log2.png"))); // NOI18N
        jButtonHome.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/log2.png"))); // NOI18N
        jButtonHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonHomeMouseClicked(evt);
            }
        });
        background.add(jButtonHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 50, 50));

        jLabelPaloVertical.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/paloPublicVertical.png"))); // NOI18N
        background.add(jLabelPaloVertical, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, -1, 500));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/paloPublic.png"))); // NOI18N
        background.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 418, 1000, 10));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/paloPublic.png"))); // NOI18N
        background.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 94, 1000, 10));

        botonMinimizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8_Expand_Arrow_32px.png"))); // NOI18N
        botonMinimizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonMinimizarMouseClicked(evt);
            }
        });
        background.add(botonMinimizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 10, 40, 50));

        jLabel6.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(111, 174, 2));
        jLabel6.setText("Welcome");
        background.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 80, 30));

        jLabelBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Login3.png"))); // NOI18N
        background.add(jLabelBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 500));

        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //verificamos si exede la cantidad de jugadores para imprimir su informacion
        if (contadorJugadores == Metodos.getInstance().getListaJugadoresTorneo().size()) {
            contadorJugadores = 0;
        } 
        else {
            imprimirDatos(Metodos.getInstance().getListaJugadoresTorneo().get(contadorJugadores));
            contadorJugadores++;
        }
        //Agregamos las preguntas al juego en una lista auxiliar
        Metodos.getInstance().listaPreguntasAuxTorneo.addAll(Metodos.getInstance().getListaPreguntaSeleccionMultiples());
        Metodos.getInstance().listaPreguntasAuxTorneo.addAll(Metodos.getInstance().getListaPreguntaSeleccionUnicas());
        Metodos.getInstance().listaPreguntasAuxTorneo.addAll(Metodos.getInstance().getListaPreguntasVerdaderoFalso());
        
        //ordenamos la lista de jugadores
        Metodos.getInstance().ordenarListaUsuarios();
        
        imprimirCategorias();
        
        usuarioActual.setText(Metodos.getInstance().getUsuarioLogueado().getNombreUsuario());
        torneoNombre.setText(Metodos.getInstance().getTorneo().getNombreTorneo());
        jLabelFotoUsuario.setIcon(Metodos.getInstance().getUsuarioLogueado().getFotografia());
        
    }//GEN-LAST:event_formWindowOpened
    public Usuario imprimirDatos(Jugador usuario){
        usuarioActual.setText(usuario.getNombreUsuario());
        jLabelFotoUsuario.setIcon(usuario.getFotografia());
        usuarioMonedas.setText(Integer.toString(usuario.getMonedas()));
        JlabelPuntos.setText(Integer.toString(usuario.getPuntos()));
        return usuario;
    
    }
    
    
    public void showTimerTournament() {
        //metodo para la logica de los turnos del juego y el tiempo para el turno de cada jugador
        java.util.Timer timer = new java.util.Timer();
        TimerTask tiempoJuego = new TimerTask() {
            @Override
            public void run() {

                horaAdmi.setText(Integer.toString(contadorTimpoTotal));
                contadorTimpoTotal++;
                Metodos.getInstance().setTiempoTotal(contadorTimpoTotal);

            }
        };
        timer.schedule(tiempoJuego, 0, 1000);
    }
    public void showTimer() {
        //metodo para la logica de los turnos del juego y el tiempo para el turno de cada jugador
        java.util.Timer timer = new java.util.Timer();
        TimerTask tiempoJuego = new TimerTask() {
            @Override
            public void run() {

                jLabelNivel.setText(Integer.toString(contador));
                contador--;
                if(preguntaRevisada == true){
                    contador = 30;
                    this.cancel();
                    //siguienteJugador();
                    //imprimirCategorias();
                    return;
                }
                if (contador == 29) {
                    jLabelNivel.setFont(new java.awt.Font("Script MT Bold", 0, 18));
                    jLabelNivel.setForeground(new java.awt.Color(111, 174, 2));
                    jLabelTimeAux.setFont(new java.awt.Font("Script MT Bold", 0, 18));
                    jLabelTimeAux.setForeground(new java.awt.Color(111, 174, 2));
                }
                if (contador == 19) {
                    jLabelNivel.setFont(new java.awt.Font("Script MT Bold", 0, 23));
                    jLabelNivel.setForeground(new java.awt.Color(255, 255, 0));
                    jLabelTimeAux.setFont(new java.awt.Font("Script MT Bold", 0, 23));
                    jLabelTimeAux.setForeground(new java.awt.Color(255, 255, 0));
                }
                if (contador == 9) {
                    jLabelNivel.setFont(new java.awt.Font("Script MT Bold", 0, 28));
                    jLabelNivel.setForeground(new java.awt.Color(204, 0, 0));
                    jLabelTimeAux.setFont(new java.awt.Font("Script MT Bold", 0, 28));
                    jLabelTimeAux.setForeground(new java.awt.Color(204, 0, 0));
                }
                if (contador == -1) {
                    jLabelNivel.setFont(new java.awt.Font("Script MT Bold", 0, 18));
                    jLabelNivel.setForeground(new java.awt.Color(111, 174, 2));
                    jLabelTimeAux.setFont(new java.awt.Font("Script MT Bold", 0, 18));
                    jLabelTimeAux.setForeground(new java.awt.Color(111, 174, 2));
                    JOptionPane.showMessageDialog(rootPane, "Time off");
                    contador = 30;
                    preguntaRevisada=true;
                    Jugador u = Metodos.getInstance().buscarJugador(usuarioActual.getText());
                    int puntos = u.getPuntos();
                    u.setPuntos((puntos-5));
                    imprimirDatos(u);
                    this.cancel();
                    //siguienteJugador();
                    //imprimirCategorias();
                    return;

                }

            }
        };
        timer.schedule(tiempoJuego, 0, 1000);
    }
    
   
    public boolean imprimirPreguntaCategoria(String categoria,int nivelDificultad){
        //metodo para imprimir una pregunta que selecciona el jugador
        preguntaRevisada = false;
        tipoRespuesta = "";
        listaRespuestas.clear();
        listModel2.clear();//limpiamos el listmodel
        for (int i = 0; i < Metodos.getInstance().getListaPreguntasAuxTorneo().size(); i++) {
            Pregunta aux = Metodos.getInstance().getListaPreguntasAuxTorneo().get(i);
            //Entra si es de la misma categoria y menor o igual al nivel
            if (aux.getCategoria().equals(categoria) & aux.getNivelDificultad() <= nivelDificultad) {
                listModel2.addElement(aux.getPregunta());
                if (aux instanceof PreguntaSeleccionMultiple){
                    tipoRespuesta = "PreguntaSeleccionMultiple";
                    tipoPregunta.setText("Multiple Selection Question");
                    Metodos.getInstance().setPreguntaSM((PreguntaSeleccionMultiple) aux);
                    PreguntaSeleccionMultiple preguntaSM = (PreguntaSeleccionMultiple) aux;
                    listModel2.addElement(preguntaSM.getRespuesta1().toString());
                    listModel2.addElement(preguntaSM.getRespuesta2().toString());
                    listModel2.addElement(preguntaSM.getRespuesta3().toString());
                    listModel2.addElement(preguntaSM.getRespuesta4().toString());
                    listModel2.addElement("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
                    jListPreguntas.setModel(listModel2);
                    //Buscar la respuesta Correcta.
                    if (Metodos.getInstance().esCorrecta(preguntaSM.getRespuesta1())) {
                        listaRespuestas.add(preguntaSM.getRespuesta1().toString());
                    }
                    if (Metodos.getInstance().esCorrecta(preguntaSM.getRespuesta2())) {
                        listaRespuestas.add(preguntaSM.getRespuesta2().toString());
                    }
                    if (Metodos.getInstance().esCorrecta(preguntaSM.getRespuesta3())) {
                        listaRespuestas.add(preguntaSM.getRespuesta3().toString());
                    }
                    if (Metodos.getInstance().esCorrecta(preguntaSM.getRespuesta4())) {
                        listaRespuestas.add(preguntaSM.getRespuesta4().toString());
                    }
                    Metodos.getInstance().getListaPreguntasAuxTorneo().remove(i);
                    return true;
                }else if (aux instanceof PreguntaSeleccionUnica){
                    tipoRespuesta = "PreguntaSeleccionUnica";
                    tipoPregunta.setText("Single Selection Question");
                    Metodos.getInstance().setPreguntaSU((PreguntaSeleccionUnica) aux);
                    PreguntaSeleccionUnica preguntaSU = (PreguntaSeleccionUnica) aux;
                    listModel2.addElement(preguntaSU.getRespuesta1().toString());
                    listModel2.addElement(preguntaSU.getRespuesta2().toString());
                    listModel2.addElement(preguntaSU.getRespuesta3().toString());
                    listModel2.addElement(preguntaSU.getRespuesta4().toString());
                    listModel2.addElement("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
                    jListPreguntas.setModel(listModel2);
                    //Buscar la respuesta Correcta.
                    if (Metodos.getInstance().esCorrecta(preguntaSU.getRespuesta1())) {
                        listaRespuestas.add(preguntaSU.getRespuesta1().toString());
                    }
                    if (Metodos.getInstance().esCorrecta(preguntaSU.getRespuesta2())) {
                        listaRespuestas.add(preguntaSU.getRespuesta2().toString());
                    }
                    if (Metodos.getInstance().esCorrecta(preguntaSU.getRespuesta3())) {
                        listaRespuestas.add(preguntaSU.getRespuesta3().toString());
                    }
                    if (Metodos.getInstance().esCorrecta(preguntaSU.getRespuesta4())) {
                        listaRespuestas.add(preguntaSU.getRespuesta4().toString());
                    }
                    Metodos.getInstance().getListaPreguntasAuxTorneo().remove(i);
                    return true;
                }    
                else if (aux instanceof PreguntaVerdaderoFalso){
                    tipoRespuesta = "PreguntaVerdaderoFalso";
                    tipoPregunta.setText("True or False Question");
                    Metodos.getInstance().setPreguntaVF((PreguntaVerdaderoFalso) aux);
                    PreguntaVerdaderoFalso preguntaVF = (PreguntaVerdaderoFalso) aux;
                    listModel2.addElement(preguntaVF.getRespuestaVerdadera().toString());
                    listModel2.addElement(preguntaVF.getRespuestaFalsa().toString());
                    listModel2.addElement("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
                    jListPreguntas.setModel(listModel2);
                    //Buscar la respuesta Correcta.
                    if (Metodos.getInstance().esCorrecta(preguntaVF.getRespuestaFalsa())) {
                        listaRespuestas.add(preguntaVF.getRespuestaFalsa().toString());
                    }
                    if (Metodos.getInstance().esCorrecta(preguntaVF.getRespuestaVerdadera())) {
                        listaRespuestas.add(preguntaVF.getRespuestaVerdadera().toString());
                    }
                    Metodos.getInstance().getListaPreguntasAuxTorneo().remove(i);
                    return true;
                }
                 
            }
        }
        juegoIniciado = false;
        Metodos.getInstance().MachineLearningPrint("This category does not have more answers, \n \n \t \t Select another one to continue");
        return false;
       
    }   
    public void imprimirCategorias(){
        //metodo para imprimir categorias
        listModel.clear();//limpiamos el listmodel
        for (int i = 0; i < Metodos.getInstance().getListaCategorias().size(); i++) {
            String aux = Metodos.getInstance().getListaCategorias().get(i).getTipo();
            listModel.addElement(aux);
        }
        jListCategorias.setModel(listModel);     
    
    }
    private void botonMinimizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonMinimizarMouseClicked
        //Para minimizar la ventana
        this.setState(JFrame.VentanaTorneo.ICONIFIED);
    }//GEN-LAST:event_botonMinimizarMouseClicked

    private void jButtonHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonHomeMouseClicked
        Metodos.getInstance().getListaJugadoresTorneo().clear();
        VentanaLogin lg = new VentanaLogin();
        lg.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_jButtonHomeMouseClicked

    private void jButtonOffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOffMouseClicked
        Metodos.getInstance().cerrar();
    }//GEN-LAST:event_jButtonOffMouseClicked

    private void jButtonImprimirCategoriasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonImprimirCategoriasMouseClicked
        //metodo para imprimir la pregunta segun la categoria
        
        if (!juegoIniciado) {
            String categoria = jListCategorias.getSelectedValue();
            Metodos.getInstance().desordenarLista();
            if(imprimirPreguntaCategoria(categoria,Metodos.getInstance().getNivelSeleccionado())){
                showTimer();
                juegoIniciado = true;
            }
        }
        
    }//GEN-LAST:event_jButtonImprimirCategoriasMouseClicked
    
    public boolean verificaGanador() {
        Torneo t=Metodos.getInstance().buscarTorneo(torneoNombre.getText());
        int cantidad = t.getCantidadPreguntasJugador();
        cantidad--;
        t.setCantidadPreguntasJugador(cantidad);
        System.out.println(t.getCantidadPreguntasJugador());
        if (cantidad == 0) 
            return true;
        
        return false;
    }
    
    private void jButtonRevisarRespuestasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonRevisarRespuestasMouseClicked
        
        
        boolean insertar = true;
        //verificamos si queda tiempo disponible
        if(contador <= 0){
            insertar = false;
        }
        //Lista de opciones
        if (preguntaRevisada == false) {
            if (insertar) {
                if ((tipoRespuesta.equals("PreguntaVerdaderoFalso") | tipoRespuesta.equals("PreguntaSeleccionUnica"))) {
                    
                    if (listaRespuestas.get(0).equals(jListPreguntas.getSelectedValue())) {//lista con respuestas correctas y compara
                        Jugador u = Metodos.getInstance().buscarJugador(usuarioActual.getText());
                        int puntos = u.getPuntos();
                        puntos+=10;
                        u.setPuntos(puntos);
                        Metodos.getInstance().MachineLearningPrint("Correct answer");
                        String categoria = jListCategorias.getSelectedValue();
                        Promedio t = new Promedio(categoria);
                        u.addPorcentajeAciertos(t,true);
                        juegoIniciado = false;
                        preguntaRevisada = true;
                        consecutivas++;
                        if(consecutivas==10){
                            Metodos.getInstance().MachineLearningPrint("CONGRATULATIONS GET 10 COINS FOR 10 QUESTIONS ANSWERED CORRECTLY");
                            int monedas=Integer.parseInt(usuarioMonedas.getText());
                            u.setMonedas(monedas-5);
                            
                        }
                        imprimirDatos(u);
                        if(cantpreg()){
                            //aqui mando todo lo que ocupee en estadisticas
                            Torneo torneo = Metodos.getInstance().buscarTorneo(torneoNombre.getText());
                            VentanaEstadisticas VE= new VentanaEstadisticas(F1,torneo);
                            VE.setVisible(true);
                            this.dispose();
                        };//verifica la cantidad de preguntas
                        return;
                    } else {
                        consecutivas=0;
                        Jugador u = Metodos.getInstance().buscarJugador(usuarioActual.getText());
                        int puntos = u.getPuntos();
                        puntos-=5;
                        u.setPuntos(puntos);
                        imprimirDatos(u);
                        String categoria = jListCategorias.getSelectedValue();
                        Promedio t = new Promedio(categoria);
                        u.addPorcentajeAciertos(t,false);
                        Metodos.getInstance().MachineLearningPrint("Wront answer \n the correct option is " + listaRespuestas.get(0));
                        preguntaRevisada = true;
                        if(cantpreg()){
                            //aqui mando todo lo que ocupee en estadisticas
                            Torneo torneo = Metodos.getInstance().buscarTorneo(torneoNombre.getText());
                            VentanaEstadisticas VE= new VentanaEstadisticas(F1,torneo);
                            VE.setVisible(true);
                            this.dispose();
                        };//verifica la cantidad de preguntas
                        return;
                    }

                }
                else if (tipoRespuesta.equals("PreguntaSeleccionMultiple")) {
                    int auxContador = 0;
                    List<String> respuestasSeleccionadasUsuario = jListPreguntas.getSelectedValuesList();
                    for (String respuestaCorrecta : listaRespuestas) {
                        for (String respuestaUsuario : respuestasSeleccionadasUsuario) {
                            if (respuestaUsuario.equals(respuestaCorrecta)) {
                                auxContador++;
                                System.out.println("Respuesta selecionada : " + respuestaUsuario);
                            }

                        }
                    }
                    if (auxContador == listaRespuestas.size()) {
                        Jugador u = Metodos.getInstance().buscarJugador(usuarioActual.getText());
                        int puntos = u.getPuntos();
                        puntos+=10;
                        u.setPuntos(puntos);
                        Metodos.getInstance().MachineLearningPrint("Correct answers  !!");
                        insertar = false;
                        String categoria = jListCategorias.getSelectedValue();
                        Promedio t = new Promedio(categoria);
                        u.addPorcentajeAciertos(t,true);
                        consecutivas++;
                        if(consecutivas==10){
                            Metodos.getInstance().MachineLearningPrint("FELICIDADES OBTIENES 10 MONEDAS POR 10 PREGUNTAS RESPONDIDAS CORRECTAMENTE");
                            int monedas=Integer.parseInt(usuarioMonedas.getText());
                            u.setMonedas(monedas-5);
                        }
                        imprimirDatos(u);
                        preguntaRevisada = true;
                        //contador setea en 1 en inicio
                        juegoIniciado = false;
                        if(cantpreg()){
                            //aqui mando todo lo que ocupee en estadisticas
                            Torneo torneo = Metodos.getInstance().buscarTorneo(torneoNombre.getText());
                            VentanaEstadisticas VE= new VentanaEstadisticas(F1,torneo);
                            VE.setVisible(true);
                            this.dispose();
                        };//verifica la cantidad de preguntas
                        return;
                    } else {
                        listModel2.clear();//limpiamos el listmodel
                        Jugador u = Metodos.getInstance().buscarJugador(usuarioActual.getText());
                        int puntos = u.getPuntos();
                        puntos -= 5;
                        u.setPuntos(puntos);
                        imprimirDatos(u);
                        String categoria = jListCategorias.getSelectedValue();
                        Promedio t = new Promedio(categoria);
                        u.addPorcentajeAciertos(t,false);
                        Metodos.getInstance().MachineLearningPrint("Wrong answer  !!");
                        listModel2.addElement("CORRECT ANSWERS");
                        for (String respuestasCorrectas : listaRespuestas) {
                            listModel2.addElement(respuestasCorrectas);
                        }
                        jListPreguntas.setModel(listModel2);
                        preguntaRevisada = true;
                        consecutivas = 0;
                        if(cantpreg()){
                            //aqui mando todo lo que ocupee en estadisticas
                            Torneo torneo = Metodos.getInstance().buscarTorneo(torneoNombre.getText());
                            VentanaEstadisticas VE= new VentanaEstadisticas(F1,torneo);
                            VE.setVisible(true);
                            this.dispose();
                        };//verifica la cantidad de preguntas
                        return;
                    }

                }
                
                
            }
        }
     
    }//GEN-LAST:event_jButtonRevisarRespuestasMouseClicked
    public void siguienteJugador() {
        if (contadorJugadores == Metodos.getInstance().getListaJugadoresTorneo().size()) {
            contadorJugadores = 0;
        } else {
            imprimirDatos(Metodos.getInstance().getListaJugadoresTorneo().get(contadorJugadores));
            contadorJugadores++;
        }
        juegoIniciado = false;
    }
    private void jButtonNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNextMouseClicked
        Jugador u = Metodos.getInstance().buscarJugador(usuarioActual.getText());                
        int monedas = u.getMonedas();
        monedas -=3;
        u.setMonedas(monedas);
        imprimirDatos(u);
        siguienteJugador();

    }//GEN-LAST:event_jButtonNextMouseClicked

    private void jButtonStartTournament1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonStartTournament1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonStartTournament1MouseClicked

    private void jButtonWildCardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonWildCardMouseClicked
        if(tipoPregunta.getText().equals("Single Selection Question")){
            Jugador usuario = Metodos.getInstance().buscarJugador(usuarioActual.getText());
            int monedasUsuario = usuario.getMonedas();
            if(monedasUsuario >= 5){
                Metodos.getInstance().buscarJugador(usuarioActual.getText()).setMonedas(monedasUsuario-5);
                imprimirDatos(usuario);
                String respuestaVerdadera = listaRespuestas.get(0);
                int cont = 2;
                int posicion = 1;
                while (cont != 0 & posicion <= listModel2.size()) {
                    if(!listModel2.get(posicion).equals(respuestaVerdadera)){
                        cont--;
                        listModel2.remove(posicion);
                        posicion--;
                    }
                    posicion++;
                }
                jListPreguntas.setModel(listModel2);
                     
            }
        }
        else{
            Metodos.getInstance().MachineLearningPrint("You only can buy this wildcard \n in Single Selection Question by 5 coins");
        }
    }//GEN-LAST:event_jButtonWildCardMouseClicked

    private void jButtonStartTournament3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonStartTournament3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonStartTournament3MouseClicked

    private void jButtonRevisarRespuestasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRevisarRespuestasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonRevisarRespuestasActionPerformed

    private void jButtonTerminarTurnoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonTerminarTurnoMouseClicked
        // BOTON PARA PASAR EL TURNO
        this.contadorJugadores+=1;
        int cont=Metodos.getInstance().getListaJugadoresTorneo().size();
        if(contadorJugadores==(cont+1)){
            contadorJugadores=1;
        }
        juegoIniciado=false;
        Metodos.getInstance().getListaJugadoresTorneo().get(this.contadorJugadores - 1);
        usuarioActual.setText(Metodos.getInstance().getListaJugadoresTorneo().get(contadorJugadores - 1).getNombreUsuario());
        Jugador u = Metodos.getInstance().buscarJugador(usuarioActual.getText());
        imprimirDatos(u);
        
    }//GEN-LAST:event_jButtonTerminarTurnoMouseClicked

    private void jButtonTerminarTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTerminarTurnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonTerminarTurnoActionPerformed

    private void jButtonWildCardMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonWildCardMouseMoved
        
    }//GEN-LAST:event_jButtonWildCardMouseMoved

    private void jButtonWildCardMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonWildCardMouseExited
        
    }//GEN-LAST:event_jButtonWildCardMouseExited

    private void jButtonWildCardMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonWildCardMouseEntered
       
    }//GEN-LAST:event_jButtonWildCardMouseEntered
    public boolean cantpreg() {
        if (verificaGanador()) {
            
            String ganador = "";//el o los usuarios que ganen
            int puntajemayor = 0;
            int contador = Metodos.getInstance().getListaJugadoresTorneo().size();
            for (int i = 0; i < (contador - 1); i++) {//obtiene el puntaje mayor
                if (Metodos.getInstance().getListaJugadoresTorneo().get(i).getPuntos() >= Metodos.getInstance().getListaJugadoresTorneo().get(i + 1).getPuntos()) {
                    puntajemayor = Metodos.getInstance().getListaJugadoresTorneo().get(i).getPuntos();
                } else {
                    puntajemayor = Metodos.getInstance().getListaJugadoresTorneo().get(i + 1).getPuntos();
                }
            }
            if(1==Metodos.getInstance().getListaJugadoresTorneo().size()){
                Metodos.getInstance().MachineLearningPrint("No quedan mas preguntas, Felicidades");
                return true;
            }
            else{
                for (int i = 0; i < contador; i++) {//suma todos los jugadores a un string si tienen el puntajemayor
                    if (puntajemayor == Metodos.getInstance().getListaJugadoresTorneo().get(i).getPuntos()) {
                        ganador += Metodos.getInstance().getListaJugadoresTorneo().get(i).getNombreUsuario() + "\t";
                    }
                }
                //imprime el ganador
                Metodos.getInstance().MachineLearningPrint("Felicidades ha ganado: " + ganador);
                //faltan estadisticas.
                return true;
            }
        }
        return false;
    }
    public void cargarDatosJugador() {
        imprimirCategorias();
        //Damos el saludo al usuario logueado
        String nombreUsuario = Metodos.getInstance().getUsuarioLogueado().getNombreUsuario();
        Usuario aux = Metodos.getInstance().buscarUsuario(nombreUsuario);
        usuarioActual.setText(null);
        usuarioActual.setText(aux.getNombreUsuario());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaTorneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaTorneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaTorneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaTorneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new VentanaTorneo("",new VentanaInicio("")).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JlabelBorderComodin;
    private javax.swing.JLabel JlabelPuntos;
    private javax.swing.JPanel background;
    private javax.swing.JLabel botonMinimizar;
    private javax.swing.JLabel fechaAdmi;
    private javax.swing.JLabel horaAdmi;
    private javax.swing.JButton jButtonHome;
    private javax.swing.JButton jButtonImprimirCategorias;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonOff;
    private javax.swing.JButton jButtonRevisarRespuestas;
    private javax.swing.JButton jButtonStartTournament1;
    private javax.swing.JButton jButtonStartTournament3;
    private javax.swing.JButton jButtonTerminarTurno;
    private javax.swing.JButton jButtonWildCard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelBackground;
    private javax.swing.JLabel jLabelFotoUsuario;
    private javax.swing.JLabel jLabelNivel;
    private javax.swing.JLabel jLabelPaloVertical;
    private javax.swing.JLabel jLabelStrat;
    private javax.swing.JLabel jLabelStrat3;
    private javax.swing.JLabel jLabelStrat4;
    private javax.swing.JLabel jLabelStrat5;
    private javax.swing.JLabel jLabelStrat6;
    private javax.swing.JLabel jLabelTerminarTurno;
    private javax.swing.JLabel jLabelTimeAux;
    private javax.swing.JLabel jLabelTorneo;
    private javax.swing.JLabel jLabelTorneo1;
    private javax.swing.JList<String> jListCategorias;
    private javax.swing.JList<String> jListPreguntas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel tipoPregunta;
    private javax.swing.JLabel torneoNombre;
    private javax.swing.JLabel usuarioActual;
    private javax.swing.JLabel usuarioMonedas;
    // End of variables declaration//GEN-END:variables
}
